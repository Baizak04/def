# loops - цикл
#
# pyt = 'кружка'
# for i in pyt:
     
#     print(i)
# for i in range(0, 71):
#     print(i)
# Тема: Циклы(Loops)
# Циклы позволяют выполнять некоторое действие в зависимости от соблюдения некоторого условия. В языке Python есть следующие типы циклов:
    # while
    # for

# Цикл while
# С помощью цикла while мы можем выполнять набор операторов, пока условие истинно.
# Пример

# Выведите r до тех пор, пока r меньше 9:

# r = 1

# while r < 11:
#     print(r)
#     r+=1
#     break
# r -= 3



# Заявление о перерыве

# С помощью оператора break мы можем остановить цикл, даже если условие while истинно:
# Пример

# Выйти из цикла, когда r равно 3:
# r = 1
# while r < 9:
#     print(r)
#     if r == 6:
#         break
#     r += 1


# r = 1
# while r < 6:
#     print(r)
#     if r == 2:
#         break
#     r += 1
# Заявление о продолжении

# С помощью оператора continue мы можем остановить текущую итерацию и продолжить следующую:
# Пример

# Перейдите к следующей итерации, если r равно 3:
# r = 1
# while r < 6:
#     r += 1
#     if r == 2:
#         continue
#     print(r) 



# Оператор else

# С оператором else мы можем запустить блок кода один раз, когда условие больше не выполняется:
# Пример

# Вывести сообщение, если условие ложно:
# i = 1
# while i < 6:
#     print(i)
#     i += 1
# else:
#   print("The end!")


# Цикл for 

# Цикл for используется для перебора последовательности (то есть списка, кортежа, словаря, набора или строки).

# Это меньше похоже на ключевое слово for в других языках программирования и работает больше как метод итератора, который можно найти в других объектно-ориентированных языках программирования.

# С помощью цикла for мы можем выполнить набор операторов, один раз для каждого элемента в списке, кортеже, наборе и т. д.


# list = ['python', 'javascript', 'ruby']
# for i in list:
#         print(i)
# Тема: Циклы(Loops)
# Циклы позволяют выполнять некоторое действие в зависимости от соблюдения некоторого условия. В языке Python есть следующие типы циклов:
    # while
    # for

# Цикл while
# С помощью цикла while мы можем выполнять набор операторов, пока условие истинно.
# Пример

# Выведите r до тех пор, пока r меньше 9:

# r = 1 

# while r < 11:
#     print(r)
    # r = +1



# Заявление о перерыве

# С помощью оператора break мы можем остановить цикл, даже если условие while истинно:
# Пример

# Выйти из цикла, когда r равно 3:
# r = 1
# while r < 9:
#     print(r)
#     if r == 3:
#         break
#     r += 1



# Заявление о продолжении

# С помощью оператора continue мы можем остановить текущую итерацию и продолжить следующую:
# Пример

# Перейдите к следующей итерации, если r равно 3:
# 
# list = 'python', 'java', 'ruby'
# for r in list: 
#     print(r)
#     if r == 'java':
#         break



# Оператор else

# С оператором else мы можем запустить блок кода один раз, когда условие больше не выполняется:
# Пример

# Вывести сообщение, если условие ложно:
# i = 1
# while i < 6:
#     print(i)
#     i += 1
# else:
#   print("Программа заверщена!")


# Цикл for 

# Цикл for используется для перебора последовательности (то есть списка, кортежа, словаря, набора или строки).

# Это меньше похоже на ключевое слово for в других языках программирования и работает больше как метод итератора, который можно найти в других объектно-ориентированных языках программирования.

# С помощью цикла for мы можем выполнить набор операторов, один раз для каждого элемента в списке, кортеже, наборе и т. д.


# list = ['python', 'javascript', 'ruby']
# for i in list: 'pyton', 'javascript'
# print()

# a = ('Введите ваще имя')
   
# payton = ("p","a", "y", "t", "o", "n")

# print(payton[0])
# print(payton[1])
# print(payton[2])
# print(payton[3])
# print(payton[4])
# print(payton[5])

# car = 'toyota', 'camry', 'bmw'
# for car in car:
#     print(car)
#     if car >= 'camry':
        # break

# range(старт, стоп, шаг)
# some = list(range(5))
# print(some)

# списки
# lists = [123, 'jekf', 12.34, 'some']

# словари (ключ:значения)
# class_room = ('knek:12')
# print(class_room)











